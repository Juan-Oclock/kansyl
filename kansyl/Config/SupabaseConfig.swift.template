import Foundation

/// Template configuration for Supabase credentials
/// 
/// IMPORTANT: Copy this file to SupabaseConfig.swift and replace with your actual values
/// DO NOT commit SupabaseConfig.swift with real credentials
///
private struct SupabaseDirectConfig {
    // TODO: Replace these with your actual Supabase values
    // Get them from your Supabase dashboard â†’ Settings â†’ API
    let url: String? = "YOUR_SUPABASE_PROJECT_URL_HERE"
    let anonKey: String? = "YOUR_SUPABASE_ANON_KEY_HERE"
}

/// Configuration manager for Supabase credentials
/// Supports both xcconfig files and direct configuration
struct SupabaseConfig {
    static let shared = SupabaseConfig()
    private let supabaseDirectConfig = SupabaseDirectConfig()
    
    private init() {}
    
    /// Supabase project URL
    var url: String {
        // Try xcconfig first, then fallback to direct configuration
        if let url = Bundle.main.object(forInfoDictionaryKey: "SUPABASE_URL") as? String,
           !url.isEmpty,
           url != "YOUR_SUPABASE_PROJECT_URL_HERE" {
            return url
        }
        
        // Fallback: Add your URL directly here for now
        // TODO: Replace with your actual Supabase URL
        guard let url = supabaseDirectConfig.url,
              url != "YOUR_SUPABASE_PROJECT_URL_HERE" else {
            fatalError("SUPABASE_URL not configured. Please set your Supabase URL in SupabaseConfig.swift")
        }
        return url
    }
    
    /// Supabase anonymous/public key (safe for client use)
    var anonKey: String {
        // Try xcconfig first, then fallback to direct configuration
        if let key = Bundle.main.object(forInfoDictionaryKey: "SUPABASE_ANON_KEY") as? String,
           !key.isEmpty,
           key != "YOUR_SUPABASE_ANON_KEY_HERE" {
            return key
        }
        
        // Fallback: Add your key directly here for now
        // TODO: Replace with your actual Supabase anon key
        guard let key = supabaseDirectConfig.anonKey,
              key != "YOUR_SUPABASE_ANON_KEY_HERE" else {
            fatalError("SUPABASE_ANON_KEY not configured. Please set your Supabase anon key in SupabaseConfig.swift")
        }
        return key
    }
    
    /// Optional: Supabase service role key (only use server-side, never in client)
    var serviceRoleKey: String? {
        guard let key = Bundle.main.object(forInfoDictionaryKey: "SUPABASE_SERVICE_ROLE_KEY") as? String,
              !key.isEmpty,
              key != "YOUR_SERVICE_ROLE_KEY_HERE" else {
            return nil
        }
        return key
    }
    
    /// Validates that all required configuration is present
    func validateConfiguration() throws {
        _ = url // This will throw if not configured
        _ = anonKey // This will throw if not configured
        
        print("âœ… Supabase configuration validated successfully")
        print("ðŸ”— Project URL configured")
        print("ðŸ”‘ Anon key configured")
    }
}